from collections.abc import Iterator
from typing import (Any, Literal, Optional, SupportsIndex, TypeVar, final,
                    overload)

from ..utilities import Rule
from .abstract import ShapeLike

__all__ = ["Shape"]

M = TypeVar("M", bound=int)
N = TypeVar("N", bound=int)


@final
class Shape(ShapeLike[M, N]):

    __slots__: tuple[Literal["_data"]]

    def __init__(self, nrows: M, ncols: N) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @overload
    def __getitem__(self, key: Literal[0]) -> M: ...
    @overload
    def __getitem__(self, key: Literal[1]) -> N: ...
    @overload
    def __getitem__(self, key: SupportsIndex) -> M | N: ...
    @overload
    def __setitem__(self, key: Literal[0], value: M) -> None: ...
    @overload
    def __setitem__(self, key: Literal[1], value: N) -> None: ...
    @overload
    def __setitem__(self, key: SupportsIndex, value: M | N) -> None: ...
    def __iter__(self) -> Iterator[M | N]: ...
    def __reversed__(self) -> Iterator[M | N]: ...
    def __contains__(self, value: Any) -> bool: ...
    def __deepcopy__(self, memo: Optional[dict[int, Any]] = None) -> Shape[M, N]: ...
    def __copy__(self) -> Shape[M, N]: ...

    @property
    def nrows(self) -> M: ...
    @nrows.setter
    def nrows(self, value: M) -> None: ...
    @property
    def ncols(self) -> N: ...
    @ncols.setter
    def ncols(self, value: N) -> None: ...

    def reverse(self) -> Shape[N, M]: ...
    def copy(self) -> Shape[M, N]: ...
    @overload
    def subshape(self, *, by: Literal[Rule.ROW]) -> Shape[Literal[1], N]: ...  # type: ignore[misc]
    @overload
    def subshape(self, *, by: Literal[Rule.COL]) -> Shape[M, Literal[1]]: ...  # type: ignore[misc]
    @overload
    def subshape(self, *, by: Rule) -> Shape[int, int]: ...
    @overload
    def subshape(self) -> Shape[Literal[1], N]: ...
    def resolve_index(self, key: SupportsIndex, *, by: Rule = Rule.ROW) -> int: ...
    def resolve_slice(self, key: slice, *, by: Rule = Rule.ROW) -> range: ...
    def sequence(self, index: int, *, by: Rule = Rule.ROW) -> tuple[int, int, int]: ...
    def range(self, index: int, *, by: Rule = Rule.ROW) -> range: ...
    def slice(self, index: int, *, by: Rule = Rule.ROW) -> slice: ...
