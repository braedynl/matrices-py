from collections.abc import Iterator
from typing import Any, Literal, Optional, SupportsIndex, TypeVar, overload

from .abc import ShapeLike

__all__ = ["ShapeView"]

M = TypeVar("M", bound=int)
N = TypeVar("N", bound=int)

ShapeViewT = TypeVar("ShapeViewT", bound=ShapeView)


class ShapeView(ShapeLike[M, N]):

    __slots__: tuple[Literal["_target"]]

    def __init__(self, target: ShapeLike[M, N]) -> None: ...
    def __repr__(self) -> str: ...
    @overload
    def __getitem__(self, key: Literal[0]) -> M: ...
    @overload
    def __getitem__(self, key: Literal[1]) -> N: ...
    @overload
    def __getitem__(self, key: SupportsIndex) -> M | N: ...
    def __iter__(self) -> Iterator[M | N]: ...
    def __reversed__(self) -> Iterator[M | N]: ...
    def __contains__(self, value: Any) -> bool: ...
    def __deepcopy__(self: ShapeViewT, memo: Optional[dict[int, Any]] = None) -> ShapeViewT: ...
    def __copy__(self: ShapeViewT) -> ShapeViewT: ...
