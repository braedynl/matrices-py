from typing import Any, Protocol, TypeVar, Union

from .base import BaseMatrix

class SupportsDunderLT(Protocol):
    def __lt__(self, other: Any) -> Any: ...

class SupportsDunderGT(Protocol):
    def __gt__(self, other: Any) -> Any: ...

class SupportsDunderLE(Protocol):
    def __le__(self, other: Any) -> Any: ...

class SupportsDunderGE(Protocol):
    def __ge__(self, other: Any) -> Any: ...

SupportsComparison = Union[SupportsDunderLT, SupportsDunderGT, SupportsDunderLE, SupportsDunderGE]
SupportsComparisonT = TypeVar("SupportsComparisonT", bound=SupportsComparison)


class OrderingMatrix(BaseMatrix[SupportsComparisonT]):
    def __lt__(self, other: BaseMatrix[Any]) -> BaseMatrix[Any]: ...
    def __gt__(self, other: BaseMatrix[Any]) -> BaseMatrix[Any]: ...
    def __le__(self, other: BaseMatrix[Any]) -> BaseMatrix[Any]: ...
    def __ge__(self, other: BaseMatrix[Any]) -> BaseMatrix[Any]: ...
